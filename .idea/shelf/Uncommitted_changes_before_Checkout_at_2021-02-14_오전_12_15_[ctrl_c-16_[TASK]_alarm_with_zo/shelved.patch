Index: app/src/main/java/com/example/ctrl_c/timetable_setting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ctrl_c;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SwitchCompat;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.recyclerview.widget.DividerItemDecoration;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.AlarmManager;\r\nimport android.app.Dialog;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.res.ColorStateList;\r\nimport android.database.Cursor;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.NumberPicker;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.material.chip.Chip;\r\nimport com.google.android.material.chip.ChipGroup;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n/******************************************************\r\n * TODO: make timetable                      ******DONE\r\n * TODO: enable timetable setting            ******DONE\r\n * TODO: save timetable in SQLite Database   ******DONE\r\n * TODO: make alarm work\r\n * TODO: zoom api\r\n * TODO: row dialog                          ******DONE\r\n *******************************************************/\r\npublic class timetable_setting extends AppCompatActivity {\r\n\r\n    SubjectData recentData, newData;\r\n    int delete_position = -1;\r\n\r\n    RecyclerView rv_timetable;\r\n    timetable_rvAdapter ra_timetable;\r\n    RecyclerView rv_timetable_row;\r\n    timetable_row_rvAdapter ra_timetable_row;\r\n\r\n    CardView cv_addRow, cv_save;\r\n    ChipGroup chipGroup;\r\n    ArrayList<SubjectData> subjects;\r\n\r\n    Dialog dialog;\r\n    NumberPicker np_Hour, np_Min, np_alarmBefore;\r\n    Button btn_cancel, btn_finish;\r\n    ImageView iv_delete;\r\n    SwitchCompat sw_useAlarm;\r\n\r\n    DBOpenHelper dbOpenHelper;\r\n    String SUBJECT = \"subject\";\r\n    String TIMETABLE = \"timetable\";\r\n    String[] tColumns = {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\", \"sun\"};\r\n\r\n    alarmUtil myAlarmUtil;\r\n    ArrayList<Integer> rowList;\r\n\r\n    @Override\r\n    protected void onCreate(final Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_timetable_setting);\r\n\r\n        //init\r\n        rv_timetable = findViewById(R.id.rv_timetable);\r\n        rv_timetable_row = findViewById(R.id.rv_timetable_row);\r\n        cv_addRow = findViewById(R.id.cv_addRow);\r\n        cv_save = findViewById(R.id.cv_timetable_save);\r\n        chipGroup = findViewById(R.id.chip_group);\r\n        recentData = null;\r\n        subjects = new ArrayList<>();\r\n\r\n        //dialog init\r\n        dialog = new Dialog(this);\r\n        dialog.setContentView(R.layout.timetable_row_dialog);\r\n        dialog.setOwnerActivity(timetable_setting.this);\r\n        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        np_Hour = dialog.findViewById(R.id.np_rowHour);\r\n        np_Min = dialog.findViewById(R.id.np_rowMin);\r\n        np_alarmBefore = dialog.findViewById(R.id.np_alarmBefore);\r\n        np_Hour.setMaxValue(23);\r\n        np_Hour.setMinValue(0);\r\n        np_Min.setMaxValue(59);\r\n        np_Min.setMinValue(0);\r\n        np_alarmBefore.setMaxValue(30);\r\n        np_alarmBefore.setMinValue(0);\r\n        btn_cancel = dialog.findViewById(R.id.btn_cancel);\r\n        btn_finish = dialog.findViewById(R.id.btn_finish);\r\n        iv_delete = dialog.findViewById(R.id.iv_delete);\r\n        sw_useAlarm = dialog.findViewById(R.id.sw_useAlarm);\r\n\r\n        //alarm init\r\n        myAlarmUtil = new alarmUtil(this, \"class\");\r\n\r\n        //timetable recyclerview\r\n        rv_timetable.addItemDecoration(new DividerItemDecoration(this, GridLayoutManager.HORIZONTAL));\r\n        rv_timetable.addItemDecoration(new DividerItemDecoration(this, GridLayoutManager.VERTICAL));\r\n        GridLayoutManager gridLayoutManager = new GridLayoutManager(this, 7);\r\n        rv_timetable.setLayoutManager(gridLayoutManager);\r\n        ra_timetable = new timetable_rvAdapter();\r\n        rv_timetable.setAdapter(ra_timetable);\r\n\r\n        //timetable row recyclerview\r\n        LinearLayoutManager linearLayoutManager_row = new LinearLayoutManager(this);\r\n        rv_timetable_row.setLayoutManager(linearLayoutManager_row);\r\n        ra_timetable_row = new timetable_row_rvAdapter();\r\n        rv_timetable_row.addItemDecoration(new DividerItemDecoration(this, LinearLayoutManager.VERTICAL));\r\n        rv_timetable_row.setAdapter(ra_timetable_row);\r\n        ra_timetable_row.setOnClickListener(new timetable_row_rvAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onClick(View v, final int position) {\r\n                dialog.show();\r\n                np_Hour.setValue(ra_timetable_row.items.get(position).getStartH());\r\n                np_Min.setValue(ra_timetable_row.items.get(position).getStartM());\r\n                np_alarmBefore.setValue(ra_timetable_row.items.get(position).getAlarmBefore());\r\n                sw_useAlarm.setChecked(ra_timetable_row.items.get(position).getUseAlarm());\r\n\r\n                final rowData row = ra_timetable_row.items.get(position);\r\n                //dialog setting\r\n                btn_finish.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        rowData temp = new rowData();\r\n                        temp.setRow(row.getRow());\r\n                        temp.setStartTime(np_Hour.getValue(), np_Min.getValue());\r\n                        temp.setUseAlarm(sw_useAlarm.isChecked());\r\n                        temp.setAlarmBefore(np_alarmBefore.getValue());\r\n                        ra_timetable_row.items.set(position, temp);\r\n                        ra_timetable_row.notifyDataSetChanged();\r\n                        ra_timetable.notifyDataSetChanged();\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n\r\n                btn_cancel.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n\r\n                iv_delete.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        ra_timetable_row.items.remove(position);\r\n                        for (int i=0;i<ra_timetable_row.getItemCount();i++) {\r\n                            if (i >= position) {\r\n                                rowData temp = ra_timetable_row.items.get(i);\r\n                                temp.setRow(temp.getRow()-1);\r\n                                ra_timetable_row.items.set(i, temp);\r\n                            }\r\n                        }\r\n\r\n                        for (int i=0;i<7;i++) {\r\n                            ra_timetable.items.remove(position * 7);\r\n                        }\r\n                        ra_timetable_row.notifyDataSetChanged();\r\n                        ra_timetable.notifyDataSetChanged();\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        //newData 는 빈칸에 들어가는 데이터이다\r\n        newData = new SubjectData();\r\n        newData.setSubject(\"none\");\r\n        newData.setColor(Color.parseColor(\"#00000000\"));\r\n\r\n        //시간표 클릭이벤트\r\n        ra_timetable.setOnItemClickListener(new timetable_rvAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(View v, int position) { //클릭해서 과목정보 수정\r\n                if (delete_position == position) { //삭제버튼 누르면\r\n                    ra_timetable.items.set(position, newData);\r\n                    delete_position = -1;\r\n                    ra_timetable.notifyDataSetChanged();\r\n                } else if ((delete_position > -1) & (delete_position != position)) { //삭제모드&다른 곳 클릭\r\n                    //원래 뷰로 돌아감\r\n                    delete_position = -1;\r\n                    ra_timetable.notifyDataSetChanged();\r\n                } else if ((delete_position == -1) & (recentData != null)) { //삭제모드가 아니고 과목이 선택되어있으면\r\n                    ra_timetable.items.set(position, recentData);\r\n                    ra_timetable.notifyDataSetChanged();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onItemLongClick(View v, int position) { //길게 누를 때 한번 호출됨\r\n                //삭제모드로 바뀜\r\n                delete_position = position;\r\n            }\r\n\r\n        });\r\n\r\n        readDB(); //과목 정보 불러오기&시간표 정보 불러오기\r\n\r\n        //과목 버튼 기능\r\n        chipGroup.setOnCheckedChangeListener(new ChipGroup.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(ChipGroup group, int checkedId) {\r\n                if (checkedId != -1) {\r\n                    recentData = subjects.get(checkedId-1);\r\n                } else {\r\n                    recentData = null;\r\n                }\r\n            }\r\n        });\r\n\r\n        //교시 추가\r\n        cv_addRow.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                addRow();\r\n            }\r\n        });\r\n\r\n        cv_save.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                dbOpenHelper.open(TIMETABLE);\r\n                dbOpenHelper.deleteAllColumns(TIMETABLE); //모두 삭제\r\n                deleteAllAlarm(rowList); //알람 모두 삭제\r\n                rowList = new ArrayList<>();\r\n                for (int row = 0;row<ra_timetable_row.getItemCount();row++) {\r\n                    rowData mData = ra_timetable_row.items.get(row); //교시 정보 얻기\r\n                    Log.e(\"useAlarm\", String.valueOf(mData.getUseAlarm()));\r\n                    ArrayList<SubjectData> classes = new ArrayList<>();\r\n                    for (int i=0;i<7;i++) {\r\n                        SubjectData tempData = ra_timetable.items.get(row * 7 + i);\r\n                        classes.add(tempData);\r\n                    }\r\n                    //알람 설정\r\n                    if (mData.getUseAlarm()) {\r\n                        myAlarmUtil.setClasses(classes);\r\n                        myAlarmUtil.setAlarm(mData.getRow() * 10, mData.getStartH(), mData.getStartM()-mData.getAlarmBefore(), true);\r\n                    } else {\r\n                        myAlarmUtil.setAlarm(mData.getRow() * 10, 0, 0, false);\r\n                    }\r\n                    rowList.add(mData.getRow());\r\n                    //데이터 쓰기\r\n                    dbOpenHelper.insertClasses(classes, mData);\r\n                }\r\n                dbOpenHelper.close(TIMETABLE);\r\n\r\n                Toast.makeText(timetable_setting.this, \"저장되었습니다\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    void addRow() {\r\n        dialog.show();\r\n        np_Hour.setValue(0);\r\n        np_Min.setValue(0);\r\n        np_alarmBefore.setValue(0);\r\n        sw_useAlarm.setChecked(false);\r\n\r\n        final rowData temp = new rowData();\r\n        btn_finish.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                temp.setRow(ra_timetable_row.getItemCount() + 1);\r\n                temp.setStartTime(np_Hour.getValue(), np_Min.getValue());\r\n                temp.setUseAlarm(sw_useAlarm.isChecked());\r\n                temp.setAlarmBefore(np_alarmBefore.getValue());\r\n                ra_timetable_row.addItem(temp);\r\n                ra_timetable_row.notifyDataSetChanged();\r\n\r\n                for(int i=0;i<7;i++) {\r\n                    ra_timetable.addItem(newData);\r\n                }\r\n                ra_timetable.notifyDataSetChanged();\r\n\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        btn_cancel.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        iv_delete.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    void readDB() {\r\n        dbOpenHelper = new DBOpenHelper(this);\r\n\r\n        //과목 목록 불러오기\r\n        dbOpenHelper.open(SUBJECT);\r\n        Cursor cursor = dbOpenHelper.selectColumns(SUBJECT);\r\n        while(cursor.moveToNext()) {\r\n            String tempSubject = cursor.getString(cursor.getColumnIndex(\"subjectName\"));\r\n            int tempColor = cursor.getInt(cursor.getColumnIndex(\"color\"));\r\n            String tempId = cursor.getString(cursor.getColumnIndex(\"id\"));\r\n            String tempPW = cursor.getString(cursor.getColumnIndex(\"password\"));\r\n            SubjectData subjectData = new SubjectData();\r\n            subjectData.setSubject(tempSubject);\r\n            subjectData.setColor(tempColor);\r\n            subjectData.setID(tempId);\r\n            subjectData.setPW(tempPW);\r\n            subjects.add(subjectData);\r\n\r\n            Chip chip = new Chip(this);\r\n            chip.setText(tempSubject);\r\n            int[][] states = new int[][] {\r\n                    new int[] {android.R.attr.state_activated}\r\n            };\r\n            int[] color = new int[] {tempColor};\r\n            ColorStateList colorStateList = new ColorStateList(states, color);\r\n            chip.setChipBackgroundColor(colorStateList);\r\n            chip.setCheckable(true);\r\n            chip.setActivated(true);\r\n            chipGroup.addView(chip);\r\n        }\r\n        cursor.close();\r\n        dbOpenHelper.close(SUBJECT);\r\n\r\n        //시간표 불러오기\r\n        dbOpenHelper.open(TIMETABLE);\r\n        int row = 0;\r\n        rowList = new ArrayList<>();\r\n        Cursor tCursor = dbOpenHelper.selectColumns(TIMETABLE);\r\n        while (tCursor.moveToNext()) { //끝날때까지 반복\r\n\r\n            //id 추가\r\n            int tempId = tCursor.getInt(tCursor.getColumnIndex(\"_id\"));\r\n\r\n            //rowData 설정\r\n            rowData tempData = new rowData();\r\n            tempData.setStartTime(tCursor.getInt(tCursor.getColumnIndex(\"hour\")), tCursor.getInt(tCursor.getColumnIndex(\"min\")));\r\n            tempData.setRow(row + 1);\r\n            tempData.setUseAlarm(tCursor.getInt(tCursor.getColumnIndex(\"useAlarm\")) == 1);\r\n            tempData.setAlarmBefore(tCursor.getInt(tCursor.getColumnIndex(\"alarmBefore\")));\r\n            ra_timetable_row.items.add(tempData); //row 추가\r\n\r\n            rowList.add(row + 1);\r\n\r\n            //수업 불러오기\r\n            String[] classes = {\"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\"};\r\n            for (int i=0;i<7;i++) { //월요일부터 일요일까지\r\n                String tempClass = tCursor.getString(tCursor.getColumnIndex(tColumns[i])); //수업 이름\r\n                int position = isInData(tempClass);\r\n                if (position != -1) { //수업이 과목 정보에 존재하면\r\n                    ra_timetable.addItem(subjects.get(position));\r\n                    classes[i] = tempClass;\r\n                } else {\r\n                    ra_timetable.addItem(newData);\r\n                }\r\n            }\r\n            ra_timetable.notifyDataSetChanged();\r\n            dbOpenHelper.updateClasses(tempId, classes, tempData);\r\n            row++;\r\n        }\r\n        tCursor.close();\r\n        dbOpenHelper.close(TIMETABLE);\r\n    }\r\n\r\n    void deleteAllAlarm(ArrayList<Integer> rowList) {\r\n        for (int i=0;i<rowList.size();i++) {\r\n            myAlarmUtil.cancelAlarm(rowList.get(i) * 10);\r\n        }\r\n    }\r\n\r\n    int isInData(String tempClass) {\r\n        int isIn = -1;\r\n        for (int i=0;i<subjects.size();i++) {\r\n            if (tempClass.equals(subjects.get(i).getSubject())) isIn = i;\r\n        }\r\n        return isIn;\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        ra_timetable.notifyDataSetChanged();\r\n        ra_timetable_row.notifyDataSetChanged();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/ctrl_c/timetable_setting.java	(revision 72a4997f75206c6cc4d5ffa8b3556eb64158ab12)
+++ app/src/main/java/com/example/ctrl_c/timetable_setting.java	(date 1613229266277)
@@ -236,7 +236,6 @@
                 rowList = new ArrayList<>();
                 for (int row = 0;row<ra_timetable_row.getItemCount();row++) {
                     rowData mData = ra_timetable_row.items.get(row); //교시 정보 얻기
-                    Log.e("useAlarm", String.valueOf(mData.getUseAlarm()));
                     ArrayList<SubjectData> classes = new ArrayList<>();
                     for (int i=0;i<7;i++) {
                         SubjectData tempData = ra_timetable.items.get(row * 7 + i);
